import oracledb
import pandas as pd
import os
import getpass

OUTPUT_FOLDER = 'oracle_csv_backup'
BLOB_FOLDER = 'blobs'

def convert_dates(df):
    
    for column in df.columns:
        if pd.api.types.is_datetime64_any_dtype(df[column]): 
            df[column] = df[column].dt.strftime('%Y-%m-%d')  
    return df

def export_to_csv(username, password, dsn, output_folder=OUTPUT_FOLDER):
    os.makedirs(output_folder, exist_ok=True)

    with oracledb.connect(user=username, password=password, dsn=dsn) as connection:
        with connection.cursor() as cursor:
            cursor.execute("SELECT table_name FROM user_tables")
            tables = [row[0] for row in cursor.fetchall()]

            print(f"Found {len(tables)} tables. Beginning export...")

            for table in tables:
                try:
                   
                    query = f"SELECT * FROM {table} WHERE ROWNUM = 1"
                    cursor.execute(query)
                    columns = [desc[0] for desc in cursor.description]
                    
                    
                    blob_columns = [col for col in columns if 'BLOB' in str(cursor.description[columns.index(col)][1])]
                    select_columns = [col for col in columns if col not in blob_columns]
                    
                    if select_columns:
                        df = pd.read_sql(f'SELECT {", ".join(select_columns)} FROM {table}', con=connection)
                    else:
                        df = pd.DataFrame()  # Empty DataFrame if no non-BLOB columns

                    # Convert date columns to the desired format
                    df = convert_dates(df)

                    filename = os.path.join(output_folder, f'{table}.csv')
                    df.to_csv(filename, index=False, encoding='utf-8-sig')
                    print(f"Saved: {filename}")
                except Exception as e:
                    print(f"Problem with table {table}: {e}")


def import_from_csv(username, password, dsn, input_folder=OUTPUT_FOLDER):
    with oracledb.connect(user=username, password=password, dsn=dsn) as connection:
        with connection.cursor() as cursor:
            
            table_order = ['AGENTS', 'CITIES', 'CLIENTS', 'PROPERTYTYPES', 'DISTRICTS', 'PROPERTIES','TRANSACTIONS','LISTINGS','LISTINGPHOTOS','SALEAGREEMENTS','PROPERTYSTATUSHISTORY','TRANSACTIONLOGS','PROPERTYDETAILS','PAYMENTS']
            
            for table_name in table_order:
                file_path = os.path.join(input_folder, f'{table_name}.csv')

                if not os.path.exists(file_path):
                    print(f"No file found for {table_name}")
                    continue
                
                try:
                    df = pd.read_csv(file_path)
                    if df.empty:
                        print(f"Empty table skipped: {table_name}")
                        continue

                    # Convert date columns to the correct format
                    df = convert_dates(df)

                    columns = ', '.join(df.columns)
                    placeholders = ', '.join([':' + str(i + 1) for i in range(len(df.columns))])

                    values = [tuple(row) for row in df.itertuples(index=False)]
                    sql = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})"
                    cursor.executemany(sql, values)
                    connection.commit()

                    print(f"Restored table: {table_name} ({len(values)} records)")
                except Exception as e:
                    print(f"Error restoring {table_name}: {e}")

def export_blobs(username, password, dsn, table_name='SaleAgreements', id_column='id', blob_column='agreement_pdf', output_folder=BLOB_FOLDER):
    os.makedirs(output_folder, exist_ok=True)

    with oracledb.connect(user=username, password=password, dsn=dsn) as connection:
        with connection.cursor() as cursor:
            query = f"SELECT {id_column}, {blob_column} FROM {table_name}"
            cursor.execute(query)

            count = 0
            for row in cursor:
                file_id, blob = row
                if blob:
                    filename = os.path.join(output_folder, f"{table_name.lower()}_{file_id}.pdf")
                    with open(filename, "wb") as f:
                        f.write(blob.read())
                    print(f"Saved BLOB to {filename}")
                    count += 1
            print(f"Exported {count} BLOB files from {table_name}.")

def import_blobs(username, password, dsn, table_name='SaleAgreements', id_column='id', blob_column='agreement_pdf', input_folder=BLOB_FOLDER):
    with oracledb.connect(user=username, password=password, dsn=dsn) as connection:
        with connection.cursor() as cursor:
            files = [f for f in os.listdir(input_folder) if f.endswith('.pdf') and f.startswith(table_name.lower())]
            count = 0

            for file in files:
                try:
                    file_path = os.path.join(input_folder, file)
                    file_id = int(file.replace(f"{table_name.lower()}_", "").replace(".pdf", ""))

                    with open(file_path, "rb") as f:
                        blob_data = f.read()

                    sql = f"""
                        UPDATE {table_name}
                        SET {blob_column} = :blob_data
                        WHERE {id_column} = :file_id
                    """
                    cursor.execute(sql, blob_data=blob_data, file_id=file_id)
                    count += 1
                except Exception as e:
                    print(f"Error inserting blob for ID {file_id}: {e}")
            connection.commit()
            print(f"Restored {count} BLOB files into {table_name}.")

# ---- WYWOŁANIE FUNKCJI ----
username = 'inf2s_chomczykm'
dsn = '213.184.8.44/orcl'
password = getpass.getpass(f"Password for {username}: ")

# Eksport danych i plików
#export_to_csv(username, password, dsn)
#export_blobs(username, password, dsn)

# Import danych i plików
import_from_csv(username, password, dsn)
import_blobs(username, password, dsn)
